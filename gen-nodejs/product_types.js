//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var pagination_ttypes = require('./pagination_types')
var category_ttypes = require('./category_types')
var category_group_ttypes = require('./category_group_types')


var ttypes = module.exports = {};
if (typeof vv === 'undefined') {
  vv = {};
}
if (typeof vv.models === 'undefined') {
  vv.models = {};
}
vv.models.Product = module.exports.Product = function(args) {
  this.id = null;
  this.categoryId = null;
  this.name = null;
  this.sku = null;
  this.metaDesc = null;
  this.notes = null;
  this.details = null;
  this.urlKey = null;
  this.imagePath = null;
  this.basePrice = null;
  this.isSoldOld = null;
  this.status = null;
  this.createdAt = null;
  this.updatedAt = null;
  this.createdBy = null;
  this.updatedBy = null;
  this.categoryGroupId = null;
  this.categories = null;
  this.categoriesGroup = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.sku !== undefined && args.sku !== null) {
      this.sku = args.sku;
    }
    if (args.metaDesc !== undefined && args.metaDesc !== null) {
      this.metaDesc = args.metaDesc;
    }
    if (args.notes !== undefined && args.notes !== null) {
      this.notes = args.notes;
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    }
    if (args.urlKey !== undefined && args.urlKey !== null) {
      this.urlKey = args.urlKey;
    }
    if (args.imagePath !== undefined && args.imagePath !== null) {
      this.imagePath = args.imagePath;
    }
    if (args.basePrice !== undefined && args.basePrice !== null) {
      this.basePrice = args.basePrice;
    }
    if (args.isSoldOld !== undefined && args.isSoldOld !== null) {
      this.isSoldOld = args.isSoldOld;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.updatedAt !== undefined && args.updatedAt !== null) {
      this.updatedAt = args.updatedAt;
    }
    if (args.createdBy !== undefined && args.createdBy !== null) {
      this.createdBy = args.createdBy;
    }
    if (args.updatedBy !== undefined && args.updatedBy !== null) {
      this.updatedBy = args.updatedBy;
    }
    if (args.categoryGroupId !== undefined && args.categoryGroupId !== null) {
      this.categoryGroupId = args.categoryGroupId;
    }
    if (args.categories !== undefined && args.categories !== null) {
      this.categories = new category_ttypes.Category(args.categories);
    }
    if (args.categoriesGroup !== undefined && args.categoriesGroup !== null) {
      this.categoriesGroup = new category_group_ttypes.CategoryGroup(args.categoriesGroup);
    }
  }
};
vv.models.Product.prototype = {};
vv.models.Product.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.categoryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sku = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.metaDesc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.notes = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.urlKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.imagePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.basePrice = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.isSoldOld = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.updatedAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.createdBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.updatedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.categoryGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.categories = new category_ttypes.Category();
        this.categories.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.categoriesGroup = new category_group_ttypes.CategoryGroup();
        this.categoriesGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.Product.prototype.write = function(output) {
  output.writeStructBegin('Product');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.I32, 2);
    output.writeI32(this.categoryId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.sku !== null && this.sku !== undefined) {
    output.writeFieldBegin('sku', Thrift.Type.STRING, 4);
    output.writeString(this.sku);
    output.writeFieldEnd();
  }
  if (this.metaDesc !== null && this.metaDesc !== undefined) {
    output.writeFieldBegin('metaDesc', Thrift.Type.STRING, 5);
    output.writeString(this.metaDesc);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.STRING, 6);
    output.writeString(this.notes);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 7);
    output.writeString(this.details);
    output.writeFieldEnd();
  }
  if (this.urlKey !== null && this.urlKey !== undefined) {
    output.writeFieldBegin('urlKey', Thrift.Type.STRING, 8);
    output.writeString(this.urlKey);
    output.writeFieldEnd();
  }
  if (this.imagePath !== null && this.imagePath !== undefined) {
    output.writeFieldBegin('imagePath', Thrift.Type.STRING, 9);
    output.writeString(this.imagePath);
    output.writeFieldEnd();
  }
  if (this.basePrice !== null && this.basePrice !== undefined) {
    output.writeFieldBegin('basePrice', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.basePrice);
    output.writeFieldEnd();
  }
  if (this.isSoldOld !== null && this.isSoldOld !== undefined) {
    output.writeFieldBegin('isSoldOld', Thrift.Type.BOOL, 11);
    output.writeBool(this.isSoldOld);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 12);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 13);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.updatedAt !== null && this.updatedAt !== undefined) {
    output.writeFieldBegin('updatedAt', Thrift.Type.STRING, 14);
    output.writeString(this.updatedAt);
    output.writeFieldEnd();
  }
  if (this.createdBy !== null && this.createdBy !== undefined) {
    output.writeFieldBegin('createdBy', Thrift.Type.STRING, 15);
    output.writeString(this.createdBy);
    output.writeFieldEnd();
  }
  if (this.updatedBy !== null && this.updatedBy !== undefined) {
    output.writeFieldBegin('updatedBy', Thrift.Type.STRING, 16);
    output.writeString(this.updatedBy);
    output.writeFieldEnd();
  }
  if (this.categoryGroupId !== null && this.categoryGroupId !== undefined) {
    output.writeFieldBegin('categoryGroupId', Thrift.Type.I32, 17);
    output.writeI32(this.categoryGroupId);
    output.writeFieldEnd();
  }
  if (this.categories !== null && this.categories !== undefined) {
    output.writeFieldBegin('categories', Thrift.Type.STRUCT, 18);
    this.categories.write(output);
    output.writeFieldEnd();
  }
  if (this.categoriesGroup !== null && this.categoriesGroup !== undefined) {
    output.writeFieldBegin('categoriesGroup', Thrift.Type.STRUCT, 19);
    this.categoriesGroup.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vv.models.ProductFilter = module.exports.ProductFilter = function(args) {
  this.name = null;
  this.sku = null;
  this.categoryId = null;
  this.categoryGroupId = null;
  this.urlKeyCategory = null;
  this.urlKeyCategoryGroup = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.sku !== undefined && args.sku !== null) {
      this.sku = args.sku;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
    if (args.categoryGroupId !== undefined && args.categoryGroupId !== null) {
      this.categoryGroupId = args.categoryGroupId;
    }
    if (args.urlKeyCategory !== undefined && args.urlKeyCategory !== null) {
      this.urlKeyCategory = args.urlKeyCategory;
    }
    if (args.urlKeyCategoryGroup !== undefined && args.urlKeyCategoryGroup !== null) {
      this.urlKeyCategoryGroup = args.urlKeyCategoryGroup;
    }
  }
};
vv.models.ProductFilter.prototype = {};
vv.models.ProductFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sku = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.categoryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.categoryGroupId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.urlKeyCategory = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.urlKeyCategoryGroup = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.ProductFilter.prototype.write = function(output) {
  output.writeStructBegin('ProductFilter');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.sku !== null && this.sku !== undefined) {
    output.writeFieldBegin('sku', Thrift.Type.STRING, 2);
    output.writeString(this.sku);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.I32, 3);
    output.writeI32(this.categoryId);
    output.writeFieldEnd();
  }
  if (this.categoryGroupId !== null && this.categoryGroupId !== undefined) {
    output.writeFieldBegin('categoryGroupId', Thrift.Type.I32, 4);
    output.writeI32(this.categoryGroupId);
    output.writeFieldEnd();
  }
  if (this.urlKeyCategory !== null && this.urlKeyCategory !== undefined) {
    output.writeFieldBegin('urlKeyCategory', Thrift.Type.STRING, 5);
    output.writeString(this.urlKeyCategory);
    output.writeFieldEnd();
  }
  if (this.urlKeyCategoryGroup !== null && this.urlKeyCategoryGroup !== undefined) {
    output.writeFieldBegin('urlKeyCategoryGroup', Thrift.Type.STRING, 6);
    output.writeString(this.urlKeyCategoryGroup);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vv.models.PaginationProduct = module.exports.PaginationProduct = function(args) {
  this.pagination = null;
  this.data = null;
  if (args) {
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new pagination_ttypes.Pagination(args.pagination);
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyList(args.data, [ttypes.Product]);
    }
  }
};
vv.models.PaginationProduct.prototype = {};
vv.models.PaginationProduct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.data = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Product();
          elem6.read(input);
          this.data.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.PaginationProduct.prototype.write = function(output) {
  output.writeStructBegin('PaginationProduct');
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 1);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (var iter7 in this.data)
    {
      if (this.data.hasOwnProperty(iter7))
      {
        iter7 = this.data[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

